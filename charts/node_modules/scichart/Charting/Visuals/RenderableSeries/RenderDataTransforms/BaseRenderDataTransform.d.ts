import { DeletableEntity } from "../../../../Core/DeletableEntity";
import { IDeletable } from "../../../../Core/IDeletable";
import { IDataChangeArgs } from "../../../Model/IDataSeries";
import { BasePointSeriesResampled } from "../../../Model/PointSeries/BasePointSeriesResampled";
import { IPointSeries } from "../../../Model/PointSeries/IPointSeries";
import { RenderPassData } from "../../../Services/RenderPassData";
import { TSciChart } from "../../SciChartSurface";
import { BaseRenderableSeries } from "../BaseRenderableSeries";
import { ISeriesDrawingProvider } from "../DrawingProviders/ISeriesDrawingProvider";
export interface IRenderDataTransform extends IDeletable {
    readonly parentSeries: BaseRenderableSeries;
    requiresTransform: boolean;
    drawingProviders: Array<ISeriesDrawingProvider>;
    runTransform(renderPassData: RenderPassData): RenderPassData;
    onDataChange(args: IDataChangeArgs): void;
}
export declare abstract class BaseRenderDataTransform<T extends BasePointSeriesResampled> extends DeletableEntity implements IRenderDataTransform {
    protected wasmContext: TSciChart;
    readonly parentSeries: BaseRenderableSeries;
    readonly drawingProviders: Array<ISeriesDrawingProvider>;
    protected pointSeries: T;
    requiresTransform: boolean;
    constructor(parentSeries: BaseRenderableSeries, wasmContext: TSciChart, drawingProviders?: Array<ISeriesDrawingProvider>);
    runTransform(renderPassData: RenderPassData): RenderPassData;
    onDataChange(args: IDataChangeArgs): void;
    delete(): void;
    protected makeRenderPassData(originalRPD: RenderPassData, pointSeries: IPointSeries): RenderPassData;
    protected abstract createPointSeries(): T;
    protected abstract runTransformInternal(renderPassData: RenderPassData): IPointSeries;
}
